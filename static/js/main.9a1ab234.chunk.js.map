{"version":3,"sources":["components/ProfilePic.js","containers/SideBar.js","containers/MainContainer.js","containers/RootContainer.js","App.js","serviceWorker.js","reducer.js","index.js"],"names":["Wrapper","styled","div","_templateObject","imgStyles","height","width","ProfilePic","react_default","a","createElement","style","src","this","props","profileImg","React","Component","connect","state","profileData","personal","img","undefined","SideBar","components_ProfilePic","MainContainer","RootContainer","className","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","fetchUserData","fetch","response","json","loadProfileData","dispatch","data","type","payload","Boolean","window","location","hostname","match","mainReducer","arguments","length","action","assign","store","createStore","composeWithDevTools","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iaAIA,IAAMA,QAAUC,EAAOC,IAAVC,KAKPC,EAAU,CACZC,OAAQ,QACRC,MAAO,SAGLC,mLAEE,OAAOC,EAAAC,EAAAC,cAACV,EAAD,KAASQ,EAAAC,EAAAC,cAAA,OAAKC,MAAOP,EAAWQ,IAAKC,KAAKC,MAAMC,qBAFtCC,IAAMC,WAchBC,cAPS,SAAAC,GACpB,MAAO,CACHJ,WAAYI,EAAMC,aAAeD,EAAMC,YAAYC,SAASC,WAK5BC,EAAzBL,CAAoCX,GCvBpC,SAASiB,IACpB,OACIhB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACe,EAAD,OCNG,SAASC,IACpB,MAAO,iBCCI,SAASC,IACpB,OACInB,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,OACXpB,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,YACXpB,EAAAC,EAAAC,cAACc,EAAD,OAEJhB,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,YACXpB,EAAAC,EAAAC,cAACgB,EAAD,YCLVG,cAEJ,SAAAA,EAAYf,GAAM,IAAAgB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAlB,KAAAgB,IAChBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAlB,KAAAkB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAtB,KAAMC,KACDsB,gBAFWN,qMAMJ,8CACWO,MADX,oDACNC,kBACaA,EAASC,cAAtBA,SACN1B,KAAKC,MAAM0B,gBAAgBD,sIAI3B,OACI/B,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,OACbpB,EAAAC,EAAAC,cAACiB,EAAD,cAjBQV,aAkCHC,mBAAQK,EAXI,SAAAkB,GACzB,MAAO,CACLD,gBAAiB,SAAAE,GACfD,EAAS,CACPE,KAAM,6BACNC,QAASF,OAMFxB,CAAuCW,GC5BlCgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DClBN,IASeC,EATI,WAAmB,IAAlB/B,EAAkBgC,UAAAC,OAAA,QAAA7B,IAAA4B,UAAA,GAAAA,UAAA,GAAZ,GAAGE,EAASF,UAAAC,OAAA,EAAAD,UAAA,QAAA5B,EAClC,OAAO8B,EAAOV,MACV,IAAK,6BACD,OAAOZ,OAAOuB,OAAO,GAAGnC,EAAO,CAACC,YAAYiC,EAAOT,UAG3D,OAAOzB,kBCOLoC,EAAQC,sBAAYN,EAAaO,iCAGvCC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAA,EAAD,CAAUL,MAAOA,GAC7B/C,EAAAC,EAAAC,cAACmD,EAAD,OACSC,SAASC,eAAe,SF+G/B,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9a1ab234.chunk.js","sourcesContent":["import React from 'react'\nimport {connect} from 'react-redux'\nimport styled from 'styled-components'\n\nconst Wrapper = styled.div`\n    padding: 3px;\n    background: #CCC;\n`\n\nconst imgStyles={\n    height: '100px',\n    width: '100px'\n}\n\nclass ProfilePic extends React.Component {\n    render(){\n        return <Wrapper><img style={imgStyles} src={this.props.profileImg}/></Wrapper>;\n    }\n}\n\n\nconst mapStateToProps = state => {\n    return {\n        profileImg: state.profileData && state.profileData.personal.img\n    }\n}\n\n\nexport default connect(mapStateToProps, undefined)(ProfilePic)\n","import React from 'react'\n\nimport ProfilePic from '../components/ProfilePic'\n\n\nexport default function SideBar(){\n    return (\n        <div>\n            <ProfilePic/>\n        </div>\n    )\n}","import React from 'react'\n\nexport default function MainContainer() {\n    return \"main container\";\n}","import React from 'react'\nimport SideBar from './SideBar';\nimport MainContainer from './MainContainer';\n\nexport default function RootContainer(){\n    return (\n        <div className=\"row\">\n            <div className=\"col-sm-3\">\n                <SideBar />\n            </div>\n            <div className=\"col-sm-9\">\n                <MainContainer/>\n            </div>\n        </div>\n    );\n}","import React, { Component } from 'react';\nimport { connect} from 'react-redux'\nimport './App.css';\n\nimport RootContainer from './containers/RootContainer';\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n    this.fetchUserData();\n  }\n\n  async fetchUserData() {\n    const url = \"/profile.json\";\n    const response = await fetch(url);\n    const json = await response.json();\n    this.props.loadProfileData(json);\n  }\n\n  render() {\n    return (\n        <div className=\"App\">\n          <RootContainer />\n        </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    loadProfileData: data => {\n      dispatch({\n        type: \"FETCH_PROFILE_DATA_SUCCESS\",\n        payload: data\n      })\n    }\n  }\n}\n\nexport default connect(undefined, mapDispatchToProps)(App);\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const mainReducer= (state={},action)=>{\n    switch(action.type) {\n        case \"FETCH_PROFILE_DATA_SUCCESS\":\n            return Object.assign({},state, {profileData:action.payload}); \n            break;\n    }\n    return state;\n}\n\nexport default mainReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {Provider} from 'react-redux'\nimport mainReducer from './reducer';\nimport { createStore } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\n\n// work with redux dev tools to debug better\nconst store = createStore(mainReducer, composeWithDevTools())\n\n\nReactDOM.render(<Provider store={store}>\n    <App />\n</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}